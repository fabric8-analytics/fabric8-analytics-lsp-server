/* --------------------------------------------------------------------------------------------
 * Copyright (c) Red Hat
 * Licensed under the Apache-2.0 License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';

import { Diagnostic, DiagnosticSeverity } from 'vscode-languageserver';
import { Range } from 'vscode-languageserver';
import { IDependencyProvider } from './collector';
import { DependencyData } from './componentAnalysis';
import { RHDA_DIAGNOSTIC_SOURCE } from './constants';
import { globalConfig } from './config';

/**
 * Stores vulnerability data of a specific dependency.
 */
class Vulnerability {
    /**
     * Creates a new instance of Vulnerability.
     * @param provider - The dependency provider of the corresponding ecosystem.
     * @param range - The text range within the document.
     * @param ref - The reference name of the dependency.
     * @param dependencyData - All vulnerability data regarding the dependency.
     */
    constructor(
        private provider: IDependencyProvider,
        private range: Range,
        private ref: string,
        private dependencyData: DependencyData[],
      ) {}

    /** 
     * Generate vulnerability information message
     * @param dependencyData Properties of the dependency object
     * @returns vulnerability information message string
     */
    private generateVulnerabilityInfo(dependencyData: DependencyData): string {
        return `${dependencyData.sourceId} vulnerability info:
Known security vulnerabilities: ${dependencyData.issuesCount}
Highest severity: ${dependencyData.highestVulnerabilitySeverity}`;
    }

    /**
     *  Generate recommendation message from source
     * @param dependencyData Properties of the dependency object
     * @returns source recommendation message string
     */
    private generateRecommendation(dependencyData: DependencyData): string {
        return `${dependencyData.sourceId} vulnerability info:
Known security vulnerabilities: ${dependencyData.issuesCount}
Recommendation: ${this.provider.resolveDependencyFromReference(dependencyData.recommendationRef) || 'No RedHat packages to recommend'}`;
        }


    /**
     * Creates a diagnostic object based on vulnerability data.
     * @returns A Diagnostic object representing the vulnerability.
     */
    getDiagnostic(): Diagnostic {
        
        let vulnerabilityAlertSeverity: DiagnosticSeverity;
        switch (globalConfig.vulnerabilityAlertSeverity) {
            case 'Error':
                vulnerabilityAlertSeverity = DiagnosticSeverity.Error;
                break;
            case 'Warning':
                vulnerabilityAlertSeverity = DiagnosticSeverity.Warning;
                break;
            default:
                vulnerabilityAlertSeverity = DiagnosticSeverity.Error;
                break;
        }

        const hasIssues = this.dependencyData.some(data => data.issuesCount > 0);
        const diagnosticSeverity = hasIssues ? vulnerabilityAlertSeverity : DiagnosticSeverity.Information;

        const messages = this.dependencyData.map(dd => {
            if (hasIssues && dd.issuesCount > 0) {
                return this.generateVulnerabilityInfo(dd);
            } else if (!hasIssues) {
                return this.generateRecommendation(dd);
            }
            return '';
        });
    
        const message = `${this.provider.resolveDependencyFromReference(this.ref)}\n\n${messages.join('\n\n')}\n`;

        return {
            severity: diagnosticSeverity,
            range: this.range,
            message: message,
            source: RHDA_DIAGNOSTIC_SOURCE,
        };
    }
}

export { Vulnerability };
import { expect } from 'chai';
import { Diagnostic, DiagnosticSeverity, Range } from 'vscode-languageserver';
import { Vulnerability } from '../src/vulnerability';

describe('Vulnerability tests', () => {
    const dummyRange: Range = {
        start: {
            line: 3,
            character: 4
        },
        end: {
            line: 3,
            character: 10
        }
    };

    const AnalyticsSource = '\nRed Hat Dependency Analytics Plugin [Powered by Snyk]';

    // it('Test vulnerability with minimal fields/without vulnerabilities and without recommendations', async () => {
    //     let vulnerability = new Vulnerability(
    //         dummyRange
    //         );

    //     const msg = '\nRecommendation: No RedHat packages to recommend';
    //     let expectedDiagnostic: Diagnostic = {
    //         severity: DiagnosticSeverity.Information,
    //         range: dummyRange,
    //         message: msg,
    //         source: AnalyticsSource,
    //     };

    //     expect(vulnerability.getDiagnostic().toString().replace(/\s/g, "")).is.eql(expectedDiagnostic.toString().replace(/\s/g, ""));
    // });

    // it('Test vulnerability without vulnerabilities and with recommendations', async () => {
    //     let vulnerability = new Vulnerability(
    //         dummyRange, 
    //         0, 
    //         'MockRef', 
    //         {name: 'mockRecommendationName', version: 'mockRecommendationVersion'}, 
    //         'mockRecommendationName', 
    //         'mockRecommendationVersion', 
    //         null, 
    //         ''
    //         );

    //     const msg = 'MockRef\nRecommendation: mockRecommendationName:mockRecommendationVersion';
    //     let expectedDiagnostic: Diagnostic = {
    //         severity: DiagnosticSeverity.Information,
    //         range: dummyRange,
    //         message: msg,
    //         source: AnalyticsSource,
    //     };

    //     expect(vulnerability.getDiagnostic().toString().replace(/\s/g, "")).is.eql(expectedDiagnostic.toString().replace(/\s/g, ""));
    // });

    // it('Test vulnerability with vulnerabilities and without remediations', async () => {
    //     let vulnerability = new Vulnerability(
    //         dummyRange, 
    //         1, 
    //         'MockRef', 
    //         null, 
    //         '', 
    //         '', 
    //         null, 
    //         'MockSeverity'
    //         );

    //     const msg = "MockRef\nKnown security vulnerabilities: 1\nHighest severity: MockSeverity\nHas remediation: No";
    //     let expectedDiagnostic: Diagnostic = {
    //         severity: DiagnosticSeverity.Error,
    //         range: dummyRange,
    //         message: msg,
    //         source: AnalyticsSource,
    //     };

    //     expect(vulnerability.getDiagnostic().toString().replace(/\s/g, "")).is.eql(expectedDiagnostic.toString().replace(/\s/g, ""));
    // });

    // it('Test vulnerability with vulnerabilities and with remediations', async () => {
    //     let vulnerability = new Vulnerability(
    //         dummyRange, 
    //         1, 
    //         'MockRef', 
    //         null, 
    //         '', 
    //         '', 
    //         {mockCVE: 'mockCVE'}, 
    //         'MockSeverity'
    //         );

    //     const msg = "MockRef\nKnown security vulnerabilities: 1\nHighest severity: MockSeverity\nHas remediation: Yes";
    //     let expectedDiagnostic: Diagnostic = {
    //         severity: DiagnosticSeverity.Error,
    //         range: dummyRange,
    //         message: msg,
    //         source: AnalyticsSource,
    //     };

    //     expect(vulnerability.getDiagnostic().toString().replace(/\s/g, "")).is.eql(expectedDiagnostic.toString().replace(/\s/g, ""));
    // });

    it('Test vulnerability with minimal fields and without vulnerabilities', async () => {
        let vulnerability = new Vulnerability(
            dummyRange,
            'pkg:maven/MockPkg@1.2.3'
            );

        expect(vulnerability.getDiagnostic()).to.eql(undefined);
    });

    it('Test vulnerability with vulnerabilities', async () => {
        let vulnerability = new Vulnerability(
            dummyRange, 
            'pkg:maven/MockPkg@1.2.3',
            1, 
            'MockSeverity'
            );

        const msg = "MockRef\nKnown security vulnerabilities: 1\nHighest severity: MockSeverity";
        let expectedDiagnostic: Diagnostic = {
            severity: DiagnosticSeverity.Error,
            range: dummyRange,
            message: msg,
            source: AnalyticsSource,
        };

        expect(vulnerability.getDiagnostic().toString().replace(/\s/g, "")).is.eql(expectedDiagnostic.toString().replace(/\s/g, ""));
    });
});

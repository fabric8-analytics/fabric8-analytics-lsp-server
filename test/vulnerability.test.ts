'use strict';

import { expect } from 'chai';
import { Range } from 'vscode-languageserver';
import { DependencyProvider } from '../src/providers/pom.xml';
import { Vulnerability } from '../src/vulnerability';

describe('Vulnerability tests', () => {
    const mavenDependencyProvider: DependencyProvider = new DependencyProvider();
    const mockMavenRef: string =  'pkg:maven/mockGroupId1/mockArtifact1@mockVersion';
    const mockRange: Range = {
        start: {
            line: 123,
            character: 123
        },
        end: {
            line: 456,
            character: 456
        }
    };

    class MockDependencyData {
        constructor(
            public sourceId: string,
            public issuesCount: number,
            public highestVulnerabilitySeverity: string
        ) {}
    }

    it('should return diagnostic without vulnerabilities from single source', async () => {
        const mockDependencyData: MockDependencyData[] = [
            new MockDependencyData('snyk-snyk', 0, 'NONE')
        ];
        let vulnerability = new Vulnerability(
            mavenDependencyProvider,
            mockRange,
            mockMavenRef,
            mockDependencyData
        );

        const diagnostic = vulnerability.getDiagnostic();
        expect(diagnostic.message.replace(/\s/g, "")).to.eql(`
            mockGroupId1/mockArtifact1@mockVersion

            snyk-snyk vulnerability info:
            Known security vulnerabilities: 0
            Highest severity: NONE
        `.replace(/\s/g, ""));
    });

    it('should return diagnostic with vulnerabilities from single source', async () => {
        const mockDependencyData: MockDependencyData[] = [
            new MockDependencyData('snyk-snyk', 2, 'HIGH')
        ];
        let vulnerability = new Vulnerability(
            mavenDependencyProvider,
            mockRange,
            mockMavenRef,
            mockDependencyData
        );

        const diagnostic = vulnerability.getDiagnostic();
        expect(diagnostic.message.replace(/\s/g, "")).to.eql(`
            mockGroupId1/mockArtifact1@mockVersion

            snyk-snyk vulnerability info:
            Known security vulnerabilities: 2
            Highest severity: HIGH
        `.replace(/\s/g, ""));
    });

    it('should return diagnostic from multiple source', async () => {
        const mockDependencyData: MockDependencyData[] = [
            new MockDependencyData('snyk-snyk', 1, 'HIGH'),
            new MockDependencyData('snyk-oss', 2, 'LOW'),
            new MockDependencyData('oss-oss', 0, 'NONE'),
            new MockDependencyData('oss-snyk', 5, 'HIGH')
        ];
        let vulnerability = new Vulnerability(
            mavenDependencyProvider,
            mockRange,
            mockMavenRef,
            mockDependencyData
        );

        const diagnostic = vulnerability.getDiagnostic();
        expect(diagnostic.message.replace(/\s/g, "")).to.eql(`
            mockGroupId1/mockArtifact1@mockVersion

            snyk-snyk vulnerability info:
            Known security vulnerabilities: 1
            Highest severity: HIGH

            snyk-oss vulnerability info:
            Known security vulnerabilities: 2
            Highest severity: LOW

            oss-oss vulnerability info:
            Known security vulnerabilities: 0
            Highest severity: NONE

            oss-snyk vulnerability info:
            Known security vulnerabilities: 5
            Highest severity: HIGH
        `.replace(/\s/g, ""));
    });
});

'use strict';

import { expect } from 'chai';
import * as sinon from 'sinon';
import { Range } from 'vscode-languageserver';

import { DependencyProvider } from '../src/providers/pom.xml';
import { Vulnerability } from '../src/vulnerability';
import * as config from '../src/config';

describe('Vulnerability tests', () => {
    const mavenDependencyProvider: DependencyProvider = new DependencyProvider();
    const mockMavenRef: string =  'pkg:maven/mockGroupId1/mockArtifact1@mockVersion';
    const mockRecommendationRef: string =  'pkg:maven/mockGroupId1/mockArtifact1@mockRecommendationVersion';
    const mockRange: Range = {
        start: {
            line: 123,
            character: 123
        },
        end: {
            line: 456,
            character: 456
        }
    };

    class MockDependencyData {
        constructor(
            public sourceId: string,
            public issuesCount: number,
            public recommendationRef: string,
            public remediationRef: string,
            public highestVulnerabilitySeverity: string
        ) {}
    }

    it('should return diagnostic with vulnerabilities for single source', async () => {
        let globalConfig = {
            vulnerabilityAlertSeverity: 'Error'
        };
        sinon.stub(config, 'globalConfig').value(globalConfig);

        const mockDependencyData: MockDependencyData[] = [
            new MockDependencyData('snyk(snyk)', 2, '', 'mockRemediationRef', 'HIGH')
        ];
        let vulnerability = new Vulnerability(
            mavenDependencyProvider,
            mockRange,
            mockMavenRef,
            mockDependencyData
        );

        const diagnostic = vulnerability.getDiagnostic();
        expect(diagnostic.message.replace(/\s/g, "")).to.eql(`
            mockGroupId1/mockArtifact1@mockVersion

            snyk(snyk) vulnerability info:
            Known security vulnerabilities: 2
            Highest severity: HIGH
        `.replace(/\s/g, ""));
    });

    it('should return diagnostic with vulnerabilities for multi source', async () => {
        let globalConfig = {
            vulnerabilityAlertSeverity: 'Warning'
        };
        sinon.stub(config, 'globalConfig').value(globalConfig);

        const mockDependencyData: MockDependencyData[] = [
            new MockDependencyData('snyk(snyk)', 2, '', 'mockRemediationRef', 'HIGH'),
            new MockDependencyData('oss(oss)', 3, '', 'mockRemediationRef', 'LOW')
        ];
        let vulnerability = new Vulnerability(
            mavenDependencyProvider,
            mockRange,
            mockMavenRef,
            mockDependencyData
        );

        const diagnostic = vulnerability.getDiagnostic();
        expect(diagnostic.message.replace(/\s/g, "")).to.eql(`
            mockGroupId1/mockArtifact1@mockVersion

            snyk(snyk) vulnerability info:
            Known security vulnerabilities: 2
            Highest severity: HIGH

            oss(oss) vulnerability info:
            Known security vulnerabilities: 3
            Highest severity: LOW
        `.replace(/\s/g, ""));
    });

    it('should return diagnostic without vulnerabilities and with recommendation for single source', async () => {
        let globalConfig = {
            vulnerabilityAlertSeverity: ''
        };
        sinon.stub(config, 'globalConfig').value(globalConfig);

        const mockDependencyData: MockDependencyData[] = [
            new MockDependencyData('snyk(snyk)', 0, mockRecommendationRef, '', 'NONE')
        ];
        let vulnerability = new Vulnerability(
            mavenDependencyProvider,
            mockRange,
            mockMavenRef,
            mockDependencyData
        );

        const diagnostic = vulnerability.getDiagnostic();
        expect(diagnostic.message.replace(/\s/g, "")).to.eql(`
            mockGroupId1/mockArtifact1@mockVersion

            snyk(snyk) vulnerability info:
            Known security vulnerabilities: 0
            Recommendation: mockGroupId1/mockArtifact1@mockRecommendationVersion
        `.replace(/\s/g, ""));
    });

    it('should return diagnostic without vulnerabilities and with recommendation for multi source', async () => {
        const mockDependencyData: MockDependencyData[] = [
            new MockDependencyData('snyk(snyk)', 0, mockRecommendationRef, '', 'NONE'),
            new MockDependencyData('oss(oss)', 0, mockRecommendationRef, '', 'NONE')
        ];
        let vulnerability = new Vulnerability(
            mavenDependencyProvider,
            mockRange,
            mockMavenRef,
            mockDependencyData
        );

        const diagnostic = vulnerability.getDiagnostic();
        expect(diagnostic.message.replace(/\s/g, "")).to.eql(`
            mockGroupId1/mockArtifact1@mockVersion

            snyk(snyk) vulnerability info:
            Known security vulnerabilities: 0
            Recommendation: mockGroupId1/mockArtifact1@mockRecommendationVersion

            oss(oss) vulnerability info:
            Known security vulnerabilities: 0
            Recommendation: mockGroupId1/mockArtifact1@mockRecommendationVersion
        `.replace(/\s/g, ""));
    });

    it('should return diagnostic without vulnerabilities and without recommendation for single source', async () => {
        const mockDependencyData: MockDependencyData[] = [
            new MockDependencyData('snyk(snyk)', 0, '', '', 'NONE')
        ];
        let vulnerability = new Vulnerability(
            mavenDependencyProvider,
            mockRange,
            mockMavenRef,
            mockDependencyData
        );

        const diagnostic = vulnerability.getDiagnostic();
        expect(diagnostic.message.replace(/\s/g, "")).to.eql(`
            mockGroupId1/mockArtifact1@mockVersion

            snyk(snyk) vulnerability info:
            Known security vulnerabilities: 0
            Recommendation: No RedHat packages to recommend
        `.replace(/\s/g, ""));
    });

    it('should return diagnostic without vulnerabilities for multi source where one where some sources do not have recommendations and others do', async () => {
        const mockDependencyData: MockDependencyData[] = [
            new MockDependencyData('snyk(snyk)', 0, '', '', 'NONE'),
            new MockDependencyData('oss(oss)', 0, mockRecommendationRef, '', 'NONE')

        ];
        let vulnerability = new Vulnerability(
            mavenDependencyProvider,
            mockRange,
            mockMavenRef,
            mockDependencyData
        );

        const diagnostic = vulnerability.getDiagnostic();
        expect(diagnostic.message.replace(/\s/g, "")).to.eql(`
            mockGroupId1/mockArtifact1@mockVersion

            snyk(snyk) vulnerability info:
            Known security vulnerabilities: 0
            Recommendation: No RedHat packages to recommend

            oss(oss) vulnerability info:
            Known security vulnerabilities: 0
            Recommendation: mockGroupId1/mockArtifact1@mockRecommendationVersion
        `.replace(/\s/g, ""));
    });

    it('should return diagnostic where some sources have vulnerabilities and others dont', async () => {
        const mockDependencyData: MockDependencyData[] = [
            new MockDependencyData('snyk(snyk)', 2, '', 'mockRemediationRef', 'HIGH'),
            new MockDependencyData('oss(oss)', 0, mockRecommendationRef, '', 'NONE')

        ];
        let vulnerability = new Vulnerability(
            mavenDependencyProvider,
            mockRange,
            mockMavenRef,
            mockDependencyData
        );

        const diagnostic = vulnerability.getDiagnostic();
        expect(diagnostic.message.replace(/\s/g, "")).to.eql(`
            mockGroupId1/mockArtifact1@mockVersion

            snyk(snyk) vulnerability info:
            Known security vulnerabilities: 2
            Highest severity: HIGH
        `.replace(/\s/g, ""));
    });
});
